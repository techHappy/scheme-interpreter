(define (even? x)
    (= (reminder x 2) 0))
    
(define (prime? n)
    (define (smallest-divisor n)
        (find-divisor n 2))
    (define (divides? a b)
        (= (reminder b a) 0))
    (define (find-divisor n test-divisor)
        (cond ((> (square test-divisor) n) n)
              ((divides? test-divisor n) test-divisor)  
              (else (find-divisor n (+ test-divisor 1)))))
    (= n (smallest-divisor n))) 
    
(define (divisiable? x y) 
    (= (reminder x y) 0))    

(define (fast-expn b n)
    (cond ((= n 0) 1)
           ((even? n) (square (fast-expn b (/ n 2))))
           (else  (* b (fast-expn b (- n 1))))))

(define (gcd a b)
    (if (= b 0)
        a
        (gcd b (reminder a b)))) 
        
(define (cube x) (* x x x))        
        
(define (sum term a next b) 
    (if (> a b) 
        0
        (+ (term a) (sum term (next a) next b))))
            
(define (inc x) (+ x 1))

(define (sum-cubes a b) (sum cube a inc b))                         