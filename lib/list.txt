(define (equal? a b)
	(cond ((eq? a b) true)
		  ((and (pair? a) (pair? b)) 
            (and (equal? (car a) (car b)) (equal? (cdr a) (cdr b))))
		  (else false)))

(define (cadr pair)
    (car (cdr  pair)))

(define (caar pair)
    (car (car  pair)))        

(define (cddr pair)
    (cdr (cdr  pair)))

(define (caddr pair)
    (car (cdr (cdr pair))))

(define (list-ref items n)
    (if (= n 0)
        (car items)
        (list-ref (cdr items) (- n 1)))) 
        
(define l1 (list 1 2 3 4 5 6 7 8 9 10))
(define l2 (cons (list 1 2) (list 3 4)))          

(define (length items)
    (if (null? items)
        0
        (+ 1 (length (cdr items)))))
        
(define (append l1 l2)
    (if (null? l1)
        l2
        (cons (car l1) (append (cdr l1) l2))))
        
(define (last-pair items)
    (if (null? (cdr items))
        (car items)
        (last-pair (cdr items))))      
        
(define (reverse items)
    (if (null? (cdr items))
        (car items)
        (cons (reverse (cdr items)) (car items))))
        

(define (count-change amount coin-values)
    (define (no-more? l)
        (null? l))
    (define (except-first-donomination l)
        (if (no-more? l)
            l
            (cdr l)))
    (define (first-donomination l)
        (if (no-more? l)
            l
            (car l)))
    (cond ((= amount 0) 1)
          ((or (< amount 0) (no-more? coin-values)) 0)
          (else (+ (count-change amount (except-first-donomination coin-values))
                    (count-change (- amount (first-donomination coin-values)) coin-values)))))
                    
(define china-currency (list 1 5 10 20 50 100))  

(define (same-parity first . items)
    (define (filter items is-odd)
        (if (null? items)
            items
            (if (= is-odd (reminder (car items) 2))
                (cons (car items) (filter (cdr items) is-odd))
                (filter (cdr items) is-odd)))) 
    (filter items (reminder first 2)))

(define (map proc items)
    (if (null? items)
        nil
        (cons (proc (car items)) (map proc (cdr items)))))
        
(define (scale-list items factor)
    (map (lambda (x) (* x factor))
        items))
        
(define (count-leaves x)
    (cond ((null? x) 0)
          ((not (pair? x)) 1)
          (else (+  (count-leaves (car x))
                    (count-leaves (cdr x))))))
                    
(define (filter predicate sequence)
    (cond ((null? sequence) nil)
          ((predicate (car sequence))
            (cons (car sequence)
                  (filter predicate (cdr sequence))))
          (else (filter predicate (cdr sequence)))))
          
(define (accumulate op initial sequence)
    (if (null? sequence)
        initial
        (op (car sequence)
            (accumulate op initial (cdr sequence)))))  
            

(define (enumerate-integer low high)
    (if (> low high)
        nil
        (cons low 
              (enumerate-integer (+ low 1) high))))                                                                               

(define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+ (fib (- n 1))
                    (fib (- n 2))))))
                    
(define (fib n)
    (define (iter count a b)
        (if (= count n)
            a
            (iter (+ count 1) b (+ a b))))
    (iter 0 0 1))                    
                    
(define (even-fibs n)
    (accumulate cons
                nil 
                (filter even? 
                        (map fib 
                             (enumerate-integer 0 n))))) 
                             

(define (stream-foreach proc s)
    (if (stream-null? s)
        (quote done)
        (begin (proc (stream-car s))
                (stream-foreach proc (stream-cdr s)))))    
                
(define (flatmap proc seq)
    (accumulate append nil (map proc seq)))

(define (prime-sum? pair)
    (prime? (+ (car pair) (car (cdr pair)))))  

(define (make-pair-sum pair)
    (list (car pair) (car (cdr pair)) (+ (car pair) (car (cdr pair)))))

(define (make-sum-pairs n)
    (map make-pair-sum
        (filter prime-sum?
                (flatmap (lambda (i)
                                    (map (lambda (j) (list i j))
                                         (enumerate-integer 1 (- i 1))))
                                (enumerate-integer 1 n)))))   
                                             